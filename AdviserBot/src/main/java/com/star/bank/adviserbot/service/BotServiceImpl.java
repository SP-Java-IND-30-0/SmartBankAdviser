package com.star.bank.adviserbot.service;

import com.star.bank.model.dto.PersonalRecommendationTgDto;
import com.star.bank.model.dto.UserDto;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestClientException;

import java.util.stream.Collectors;

@Service
public class BotServiceImpl implements BotService {

    private final RestTemplate restTemplate;

    @Value("${main.app.url}")
    private String mainApp;

    public BotServiceImpl(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    @Override
    public String getRecommendation(String firstName, String lastName) {
        String url = String.format("%s/users/find?firstName=%s&lastName=%s", mainApp, firstName, lastName);

        try {
            ResponseEntity<UserDto> response = restTemplate.getForEntity(url, UserDto.class);
            UserDto user = response.getBody();

            if (user == null) {
                return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.";
            }


            String recommendationsUrl = String.format("%s/recommendation/%s", mainApp, user.getId());
            ResponseEntity<PersonalRecommendationTgDto> recResponse = restTemplate.getForEntity(recommendationsUrl, PersonalRecommendationTgDto.class);

            PersonalRecommendationTgDto recommendations = recResponse.getBody();
            if (recommendations == null || recommendations.getRecommendations().isEmpty()) {
                return String.format("üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s %s!\n\n–ü–æ–∫–∞ –¥–ª—è –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        user.getFirstName(), user.getLastName());
            }

            String productList = recommendations.getRecommendations().stream()
                    .map(product -> String.format("%s - %s\n", product.getName(), product.getText()))
                    .collect(Collectors.joining("\n"));

            return String.format("üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s %s!\n\nüéØ –í–∞–º –º–æ–≥—É—Ç –ø–æ–¥–æ–π—Ç–∏:\n%s",
                    user.getFirstName(), user.getLastName(), productList);

        } catch (HttpClientErrorException.NotFound e) {
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.";
        } catch (RestClientException e) {
            return "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

}
